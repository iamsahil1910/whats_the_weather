{"version":3,"sources":["app/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeValue","event","setState","location","target","value","getWeather","fetch","concat","state","then","response","json","data","place","name","temp","current","temp_c","weather","condition","text","react_default","a","createElement","className","htmlFor","id","onChange","type","onClick","React","Component","Main","_this2","app_Weather","App","app_Main","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAIMA,2BAEF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA+BVQ,YAAc,SAACC,GAEXR,EAAKS,SAAS,CACVC,SAAUF,EAAMG,OAAOC,SAnCZZ,EAuCnBa,WAAa,WAETC,MAAK,8EAAAC,OAA+Ef,EAAKgB,MAAMN,WAC1FO,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACFpB,EAAKS,SAAS,CACVY,MAAOD,EAAKV,SAASY,KACrBC,KAAMH,EAAKI,QAAQC,OACnBC,QAASN,EAAKI,QAAQG,UAAUC,UA5C5C5B,EAAKgB,MAAQ,CACTN,SAAU,GACVW,MAAO,GACPE,KAAM,GACNG,QAAS,IAPE1B,wEAaf,OACI6B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,QAAf,kBACAJ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKG,GAAG,YACJL,EAAAC,EAAAC,cAAA,SAAOI,SAAUhC,KAAKI,YAAa6B,KAAK,OAAOxB,MAAOT,KAAKa,MAAMN,YAErEmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,UAAQM,QAASlC,KAAKU,YAAtB,kBAEJgB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,uBAAe5B,KAAKa,MAAMK,OAC1BQ,EAAAC,EAAAC,cAAA,0BAAkB5B,KAAKa,MAAMO,KAA7B,MACAM,EAAAC,EAAAC,cAAA,wBAAgB5B,KAAKa,MAAMU,kBA5BzBY,IAAMC,YAwDPC,cAEjB,SAAAA,EAAYzC,GAAO,IAAA0C,EAAA,OAAAxC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqC,IAEfC,EAAAxC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuC,GAAAlC,KAAAH,KAAMJ,KAEDiB,MAAQ,GAJEyB,wEAWf,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,uBACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACW,EAAD,cAjBkBJ,IAAMC,WC3CzBI,mLATX,OAEAd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACa,EAAD,cALYL,aCMEM,QACW,cAA7BC,OAAOpC,SAASqC,UAEe,UAA7BD,OAAOpC,SAASqC,UAEhBD,OAAOpC,SAASqC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.4b59652e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n// import { createSecureContext } from \"tls\";\n\nclass Weather extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            location: \"\",\n            place: \"\",\n            temp: \"\",\n            weather: \"\"\n        };\n    }\n\n    render() {\n\n        return (\n            <div className=\"weather\">\n                <label htmlFor=\"text\">Enter Location</label>\n                <br />\n                <div id=\"location\">\n                    <input onChange={this.changeValue} type=\"text\" value={this.state.location} />\n                </div>\n                <div className=\"button\">\n                    <button onClick={this.getWeather}>Check Weather</button>\n                </div>\n                <div>\n                    <h1>Location: {this.state.place}</h1>\n                    <h3>Temperature: {this.state.temp} C</h3>\n                    <h3>Condition: {this.state.weather}</h3>\n                </div>\n            </div>\n        );\n    }\n\n    changeValue = (event) => {\n\n        this.setState({\n            location: event.target.value\n        });\n    }\n\n    getWeather = () => {\n\n        fetch(`https://api.apixu.com/v1/current.json?key=e030e73c813d42038df30529190603&q=${this.state.location}`)\n            .then(response => response.json())\n            .then(data => {\n                this.setState({\n                    place: data.location.name,\n                    temp: data.current.temp_c,\n                    weather: data.current.condition.text\n                });\n            });\n\n    }\n}\n\nexport default class Main extends React.Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n\n        };\n    }\n\n    render() {\n\n        return (\n            <div className=\"main\">\n                <div className=\"title\">What's the Weather?</div>\n                <hr />\n                <Weather />\n            </div>\n        );\n    }\n}\n\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport Main from './app/index';\n\nclass App extends Component {\n  render() {\n    return (\n\n    <div className=\"App\">\n      <Main />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}